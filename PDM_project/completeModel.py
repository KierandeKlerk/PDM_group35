"""
Script demonstrating a quadrotor following a path generated by RRT* from an occupancy grid extracted from a 3D mesh file (.obj in our case). 
The simulation is run by a RRTAviary environment (found in our 'quadrotor_project' package), derived from gym-pybullet-drones's CtrlAviary environment.
The drone is controlled locally through the DLSPID class from gym-pybullet-drones

This script provides 4 tracks through which the quadrotor has to navigate. 
All tracks have pre-computed paths that can be loaded to avoid having to rerun RRT* on the given track every time.
"""

import time
import numpy as np
import pybullet as p

from gym_pybullet_drones.utils.enums import DroneModel, Physics
from gym_pybullet_drones.control.DSLPIDControl import DSLPIDControl
from gym_pybullet_drones.utils.Logger import Logger
from gym_pybullet_drones.utils.utils import sync

from quadrotor_project.envs.RRTAviary import RRTAviary

########################################################
#### Important settings ################################
########################################################
'''
Choose a track: 
- 0 for a sample trajectory (spiral)
- 1 for a simple course with obstacle variance in x,y plane, path generated by 2D RRT* algorithm
- 2 for a (relatively) simple course with obstacle variance in 3D, path generated by 3D RRT* algorithm
- 3 for a complex course with obstacle variance in 3D, it is strongly adivsed to set 'loadPath' to True (generating the path from scratch takes about 4 hours of computing on a relatively high end laptop)
- 4 for a relatively simple but more realistic set of obstacles.
'''
track = 5

loadPath = True # Load precomputed path ('track[n].npy' with n the chosen track) from quadrotor_project/assets/, if set to false, the program will pause after margins have been generated while the plot is open, a new plot will be shown right before the simulation starts and thus pause the program while it is open
savePath = True # If set to true and loadPath set to False, the computed path will be saved to quadrotor_project/assets/ as 'track[n].npy'
########################################################



#### Environment settings ##############################
drone = DroneModel("cf2x")
num_drones = 1 # Do not change, drones will collide and certain custom functions will break
physics = Physics("pyb") 
gui = True # Set to True for simulation visualization
use_logger = False # Log simulation data
save_logger = False # Save logged data to CSV file
plot = False # Plot certain data, given use_logger set to true
user_debug_gui = False 
aggregate = True
obstacles = True # Set to True to load visual and collision models of the chosen tracks, if False, the quadrotor will simply follow a the path without chance of collisions
record_video = False # Set to True in order to record simulation (somehow this generates an mp4 file that is 6 to 4 times faster that it simulation time)
do_print = False # Print pose every few steps along with other data




# Simulation settings
simulation_freq_hz = 240
control_freq_hz = 48
duration_sec = 70
output_folder = 'results'
colab = False

#############################################################
#### Initialize the simulation ##############################
#############################################################
AGGR_PHY_STEPS = int(simulation_freq_hz/control_freq_hz) if aggregate else 1

#### Create the environment 

env = RRTAviary(drone_model=drone,
                num_drones=num_drones,
                physics=physics,
                neighbourhood_radius=10,
                freq=simulation_freq_hz,
                aggregate_phy_steps=AGGR_PHY_STEPS,
                gui=gui,
                record=record_video,
                obstacles=obstacles,
                track = track,
                load_path = loadPath,
                save_path = savePath,
                user_debug_gui=user_debug_gui
                )

### Generate waypoints
path_refit, track_time = env.getPath()
numWP = int(track_time*control_freq_hz) # Calculate the amount of waypoints we need based on track_time and the chosen control frequency
ind = np.round(np.linspace(0, len(path_refit) - 1, numWP)).astype(int) # Choosing indices from the path to make sure the TARGET_POS array is evenly filled up
fine_waypoints = path_refit[ind,:] # Fill up the TARGET_POS array
wp_counter = 0 # Initialize the waypoint counter

#### Initialize the logger #################################
if use_logger:
    logger = Logger(logging_freq_hz=int(simulation_freq_hz/AGGR_PHY_STEPS),
                    num_drones=num_drones,
                    output_folder=output_folder,
                    colab=colab
                    )

#### Initialize the controllers ############################
ctrl = [DSLPIDControl(drone_model=drone) for i in range(num_drones)]


#### Run the simulation ####################################
CTRL_EVERY_N_STEPS = int(np.floor(env.SIM_FREQ/control_freq_hz)) # Calculate the fraction of the amount of simulation steps control has to be computed
action = {str(i): np.array([0,0,0,0]) for i in range(num_drones)}
START = time.time()

'''Select desired static camera by uncommenting one of the next lines'''
# p.resetDebugVisualizerCamera(0.01, -89.99,-89.99,[0,3,5]) # turn on to get view from above (static)
# p.resetDebugVisualizerCamera(3, -45,-45,[0,1,1]) # turn on to get view from above (static)
# p.resetDebugVisualizerCamera(cameraDistance=5, cameraYaw=0, cameraPitch=-20, cameraTargetPosition=[2.5, 2.5, 2.5])

for i in range(0, int(duration_sec*env.SIM_FREQ), AGGR_PHY_STEPS):
    
    #### Step the simulation ###################################
    obs, reward, done, info = env.step(action)

    '''Select desired dynamic camera by uncommenting desired camera position'''
    # p.resetDebugVisualizerCamera(0.001, 0, -roll*57.2958-30,obs[str(j)]["state"][:3]- [0,0,0]) # turn on to track the drone POV
    p.resetDebugVisualizerCamera(0.25, 0, -30,obs[str(0)]["state"][:3]- [0,0,0]) # turn on to track the drone from behind
    # p.resetDebugVisualizerCamera(0.6, 0, -70,obs[str(j)]["state"][:3]- [0,0,0]) # turn on to track the drone from above

    #### Compute control at the desired frequency ##############
    if i%CTRL_EVERY_N_STEPS == 0:
        #### Compute control for the current way point #########
        for j in range(num_drones):
            action[str(j)], _, _ = ctrl[j].computeControlFromState(control_timestep=CTRL_EVERY_N_STEPS*env.TIMESTEP,
                                                                    state=obs[str(j)]["state"],
                                                                    target_pos=fine_waypoints[wp_counter],
                                                                    target_rpy=env.INIT_RPYS[j, :]
                                                                    )
            wp_counter += 1 if wp_counter<numWP-1 else 0
        yaw, pitch, roll = p.getEulerFromQuaternion(obs[str(j)]["state"][3:7])
        

        # print(f'Time right now: {i/env.SIM_FREQ}')

    #### Log the simulation ####################################
    if use_logger:
        for j in range(num_drones):
            logger.log(drone=j,
                    timestamp=i/env.SIM_FREQ,
                    state=obs[str(j)]["state"],
                    control=np.hstack([fine_waypoints[wp_counter, 0:2], env.INIT_XYZS[j, 2], env.INIT_RPYS[j, :], np.zeros(6)])
                    )

    #### Printout ##############################################
    if do_print:
        if i%env.SIM_FREQ == 0:
            env.render()

    #### Sync the simulation ###################################
    if gui:
        sync(i, START, env.TIMESTEP)

#### Close the environment #################################
env.close()

#### Save the simulation results ###########################
if save_logger:
    logger.save()
    logger.save_as_csv("pid") # Optional CSV save

# #### Plot the simulation results ###########################
if plot and use_logger:
    logger.plot()